import React from "react";
import { Container, CssBaseline, Typography, Box } from "@mui/material";
import ProjectionGrid from "./components/ProjectionGrid";
import SummaryPanel from "./components/SummaryPanel";
import { useApp } from "./hooks/useApp";

/**
 * Componente principal de la aplicaci√≥n - Completamente presentacional
 * Refactorizado siguiendo principios SOLID
 * Toda la l√≥gica est√° delegada al hook useApp
 */
const App: React.FC = () => {
  // Toda la l√≥gica est√° encapsulada en el hook personalizado
  const {
    data,
    metrics,
    error,
    selectedDate,
    colorService,
    statisticsService,
    handleCellEdit,
    handleColumnSelect,
    styles,
    shouldShowError,
    shouldShowLoading,
    shouldShowContent
  } = useApp();

  return (
    <Container maxWidth="xl">
      <CssBaseline />
      <Box sx={{ my: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom sx={styles.title}>
          üìà Sistema de Proyecci√≥n de Inventario
        </Typography>
        <Typography variant="subtitle1" color="text.secondary" sx={{ 
          mb: 3,
          fontSize: '1.1rem',
          fontWeight: 500
        }}>
          Visualizaci√≥n y gesti√≥n inteligente de proyecciones diarias de productos
        </Typography>
        
        {/* Mostrar m√©tricas del sistema */}
        {metrics && (
          <Typography variant="body2" color="text.secondary" sx={{ 
            mb: 2,
            fontSize: '0.9rem',
            opacity: 0.8
          }}>
            üìã <strong>{metrics.totalProducts}</strong> productos ‚Ä¢ 
            üè¢ <strong>{metrics.uniqueCenters}</strong> centros ‚Ä¢ 
            üì¶ <strong>{metrics.uniqueReferences}</strong> referencias √∫nicas
          </Typography>
        )}
        
        <Typography variant="body2" color="text.secondary" sx={styles.instructions}>
          üí° <strong>Instrucciones:</strong> Haga clic en cualquier celda para editar el valor de "Pedido de Abastecimiento". 
          Los colores se actualizan autom√°ticamente seg√∫n las zonas de riesgo. 
          Seleccione una columna de fecha para ver el resumen estad√≠stico.
        </Typography>
      </Box>

      {/* Renderizado condicional optimizado - Estados presentacionales puros */}
      {shouldShowError && (
        <Box sx={styles.errorContainer}>
          <Typography variant="h6" color="error.main">
            ‚ö†Ô∏è Error al cargar los datos
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {error}
          </Typography>
        </Box>
      )}

      {shouldShowLoading && (
        <Box sx={styles.loadingContainer}>
          <Typography variant="h6" color="primary.main">
            üìä Cargando datos de proyecci√≥n...
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Procesando {metrics?.totalProducts || 0} productos
          </Typography>
        </Box>
      )}

      {shouldShowContent && (
        <>
          <ProjectionGrid 
            data={data} 
            onCellEdit={handleCellEdit}
            onColumnSelect={handleColumnSelect}
            colorService={colorService}
          />
          
          <SummaryPanel 
            data={data} 
            selectedDate={selectedDate}
            colorService={colorService}
            statisticsService={statisticsService}
          />
        </>
      )}
    </Container>
  );
};

export default App;